package hw03frequencyanalysis

import (
	"testing"

	"github.com/stretchr/testify/require"
)

// Change to true if needed.
var taskWithAsteriskIsCompleted = false

var text = `Как видите, он  спускается  по  лестнице  вслед  за  своим
	другом   Кристофером   Робином,   головой   вниз,  пересчитывая
	ступеньки собственным затылком:  бум-бум-бум.  Другого  способа
	сходить  с  лестницы  он  пока  не  знает.  Иногда ему, правда,
		кажется, что можно бы найти какой-то другой способ, если бы  он
	только   мог   на  минутку  перестать  бумкать  и  как  следует
	сосредоточиться. Но увы - сосредоточиться-то ему и некогда.
		Как бы то ни было, вот он уже спустился  и  готов  с  вами
	познакомиться.
	- Винни-Пух. Очень приятно!
		Вас,  вероятно,  удивляет, почему его так странно зовут, а
	если вы знаете английский, то вы удивитесь еще больше.
		Это необыкновенное имя подарил ему Кристофер  Робин.  Надо
	вам  сказать,  что  когда-то Кристофер Робин был знаком с одним
	лебедем на пруду, которого он звал Пухом. Для лебедя  это  было
	очень   подходящее  имя,  потому  что  если  ты  зовешь  лебедя
	громко: "Пу-ух! Пу-ух!"- а он  не  откликается,  то  ты  всегда
	можешь  сделать вид, что ты просто понарошку стрелял; а если ты
	звал его тихо, то все подумают, что ты  просто  подул  себе  на
	нос.  Лебедь  потом  куда-то делся, а имя осталось, и Кристофер
	Робин решил отдать его своему медвежонку, чтобы оно не  пропало
	зря.
		А  Винни - так звали самую лучшую, самую добрую медведицу
	в  зоологическом  саду,  которую  очень-очень  любил  Кристофер
	Робин.  А  она  очень-очень  любила  его. Ее ли назвали Винни в
	честь Пуха, или Пуха назвали в ее честь - теперь уже никто  не
	знает,  даже папа Кристофера Робина. Когда-то он знал, а теперь
	забыл.
		Словом, теперь мишку зовут Винни-Пух, и вы знаете почему.
		Иногда Винни-Пух любит вечерком во что-нибудь поиграть,  а
	иногда,  особенно  когда  папа  дома,  он больше любит тихонько
	посидеть у огня и послушать какую-нибудь интересную сказку.
		В этот вечер...`

var text2 = `Четыре Проверка Проверка Четыре Два Велосипед Бег Три Велосипед 
	Хлеб Бег Пять Дела Бег Дела Лес Тест Соль Дом Бег Два Еще Еще Дальше Хлеб Сад 
	Дальше Два Очень Дом Хорошо Велосипед Бег Дела Хлеб Четыре Хлеб Пять Дальше Велосипед 
	Лес Очень Велосипед Сад Проверка Проверка Еще Тест Три Дела Тест Проверка Как Четыре
	Хлеб Дела Дела Привет Пять Дальше Дальше Очень Привет Проверка Лес Хорошо Велосипед 
	Лес Дом Пять Хорошо Пять Привет Проверка Дела Еще Соль Лес Хорошо Сад Четыре Очень Пять
	Соль Очень Два Четыре Четыре Еще Велосипед Проверка Проверка Хлеб Хлеб Три Три Дела Тест 
	Пять Дела Хорошо Как Бег Тест Сад Велосипед Пять Дом Привет Соль Дом Дальше Привет Соль 
	Тест Четыре Тест Проверка Четыре Проверка Соль Еще Дальше Бег Сад Тест Велосипед Бег Тест
	Бег Велосипед Тест Три Дом Дом Лес Четыре Сад Пять Хорошо Четыре Соль Три Дальше Соль Дела
	Лес Четыре Хорошо Дом Два Дела Тест Привет Дела Два Привет Велосипед Два Хорошо Хорошо 
	Привет Дела Тест Три Проверка Как Еще Пять Сад Дела Привет Четыре Велосипед Как Как Лес 
	Проверка Как Бег Пять Еще Привет Соль Дальше Еще Дела Как Очень Хорошо Три Дальше Как 
	Три Еще Хорошо Привет Хлеб Тест Очень Велосипед Привет Два Лес Четыре Привет Как Проверка 
	Очень Велосипед Как Привет Два Четыре Как Три Как Пять Тест Дальше Пять Соль Два Еще Как 
	Бег Очень Дальше Хорошо Еще Тест Проверка Очень Велосипед Тест Велосипед Два Велосипед 
	Проверка Проверка Три Сад Пять Хорошо Хлеб Четыре Как Очень Хорошо Еще Дела Два Велосипед 
	Дальше Привет Пять Хорошо Пять Дела Два Очень Привет Два Тест Четыре Лес Сад Бег Как Очень
	Очень Проверка Пять Привет Хорошо Пять Четыре Еще Три Дела Два Три Три Как Три Привет Дальше 
	Как Тест Два Бег Хорошо Дальше Еще Бег Дальше Очень Еще Сад Три Как Очень Дальше Дальше
	Соль Проверка Дом Дальше Как Очень Дом Хорошо Четыре Еще Бег Бег Очень Три Три Как Дела 
	Четыре Два Бег Еще Привет Проверка Еще Два Тест Хлеб Дом Пять Велосипед Хлеб Бег Три Привет 
	Два Лес Дела Очень Три Очень Еще Велосипед Хорошо Хорошо Дальше Тест Бег Сад Пять Два Бег`

func TestTop10(t *testing.T) {
	t.Run("no words in empty string", func(t *testing.T) {
		require.Len(t, Top10(""), 0)
	})

	t.Run("positive test", func(t *testing.T) {
		if taskWithAsteriskIsCompleted {
			expected := []string{
				"а",         // 8
				"он",        // 8
				"и",         // 6
				"ты",        // 5
				"что",       // 5
				"в",         // 4
				"его",       // 4
				"если",      // 4
				"кристофер", // 4
				"не",        // 4
			}
			require.Equal(t, expected, Top10(text))
		} else {
			expected := []string{
				"он",        // 8
				"а",         // 6
				"и",         // 6
				"ты",        // 5
				"что",       // 5
				"-",         // 4
				"Кристофер", // 4
				"если",      // 4
				"не",        // 4
				"то",        // 4
			}
			require.Equal(t, expected, Top10(text))
		}
	})

	t.Run("limit top 10 lexicographically sorted words from 20 where 15 have same repeat count", func(t *testing.T) {
		if !taskWithAsteriskIsCompleted {
			expected := []string{
				"Бег",       // 20
				"Велосипед", // 20
				"Дальше",    // 20
				"Два",       // 20
				"Дела",      // 20
				"Еще",       // 20
				"Как",       // 20
				"Очень",     // 20
				"Привет",    // 20
				"Проверка",  // 20
			}
			require.Equal(t, expected, Top10(text2))
			require.NotContains(t, Top10(text2), "Пять")
		}
	})

}
